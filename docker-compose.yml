version: "3"
services:
  # MySQL service for shopping
  mysql-db:
    image: mysql:latest
    container_name: mysql-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: wahid112*
      MYSQL_DATABASE: db_ikpm
      MYSQL_USER: root
      MYSQL_PASSWORD: wahid112*
    volumes:
      - ./mysql-data:/var/lib/mysql

  # MongoDB service for other microservices
  nosql-db:
    image: mongo:latest
    container_name: nosql-db
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb-data:/data/db

  rabbitmq:
    image: rabbitmq:alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"

  # Products microservice using MongoDB
  products:
    build:
      dockerfile: Dockerfile
      context: ./products
    container_name: products
    ports:
      - "8092:8092"
    restart: always
    depends_on:
      - "nosql-db"
      - "rabbitmq"
    volumes:
      - .:/app
      - /app/products/node_modules
    env_file:
      - ./products/.env.dev

  # Shopping microservice using MySQL
  shopping:
    build:
      dockerfile: Dockerfile
      context: ./shopping
    container_name: shopping
    ports:
      - "8095:8095"
    restart: always
    depends_on:
      - "mysql-db"
      - "rabbitmq"
    volumes:
      - .:/app
      - /app/shopping/node_modules
    env_file:
      - ./shopping/.env.dev

  # Stores microservice using MongoDB
  stores:
    build:
      dockerfile: Dockerfile
      context: ./stores
    container_name: stores
    ports:
      - "8094:8094"
    restart: always
    depends_on:
      - "nosql-db"
      - "rabbitmq"
    volumes:
      - .:/app/
      - /app/stores/node_modules
    env_file:
      - ./stores/.env.dev

  # Users microservice using MongoDB
  users:
    build:
      dockerfile: Dockerfile
      context: ./users
    container_name: users
    ports:
      - "8093:8093"
    restart: always
    depends_on:
      - "nosql-db"
      - "rabbitmq"
    volumes:
      - .:/app/
      - /app/users/node_modules
    env_file:
      - ./users/.env.dev

  # Nginx proxy for routing between services
  nginx-proxy:
    build:
      dockerfile: Dockerfile
      context: ./proxy
    depends_on:
      - products
      - shopping
      - users
      - stores
    ports:
      - "80:80"
